buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
	maven {
    name = "QMXTech"
    url = "https://artifactory.qmxtech.com/artifactory/minecraft-release/"
  }
}

apply plugin: 'scala'
apply plugin: 'forge'

// define the properties file
ext.configFile = file "project.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = System.getenv("BUILD_NAME") ?: "${config.mod_version}." + ( System.getenv("BUILD_NUMBER") ?: "null" )
group = "${config.group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.mod_id}"

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    runDir = "run"
}

dependencies {
  compile 'net.machinemuse.numina:Numina:0.4.0.7-QMX:dev'
  compile 'com.mod-buildcraft:buildcraft:6.3.5:dev'
  compile 'com.enderio:EnderIO:1.7.10-2.2.8.340:dev'
  compile 'net.industrial-craft:industrialcraft-2:2.2.670-experimental:api'
}

new File(config.libs_dir).mkdirs()
def getLibrary(filename) {
    def f = new File(config.libs_dir + filename)
    if (!f.exists()) {
        new URL(config.apisource_url + filename).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    dependencies {
        compile files(config.libs_dir + filename)
    }
}

//getLibrary("Atomic-Science-1.1.0.16-api.zip") -- Should be ResonantInduction once this is stable(?)
getLibrary("CoFHLib-API-[1.7.10]1.0.0B9-118-Compiled.jar")
//getLibrary("forestry-api-2.3.0.1.zip")
getLibrary("GalacticraftCore-API-BETA-1.7-3.0.1.8-Compiled.jar")
//getLibrary("MFFS2_API.zip")
getLibrary("MineFactoryReloaded-API-[1.7.10]2.8.0RC3-Compiled-591.jar")
getLibrary("Railcraft-API-9.5.0.0-Compiled.jar")
getLibrary("slick-util.jar")
getLibrary("Thaumcraft-API-4.2.3.5-Compiled.jar")
getLibrary("RenderPlayerAPI-1.7.10-1.3.jar")
getLibrary("SmartRender-dev-1.7.10-2.1.jar")
//getLibrary("ThermalExpansion-API-2.3.0b.zip")

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'numina_at.cfg'
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives devJar
}
